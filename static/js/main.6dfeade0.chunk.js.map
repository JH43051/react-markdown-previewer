{"version":3,"sources":["components/Preview.js","components/Toolbar.js","components/Editor.js","App.js","index.js"],"names":["marked","setOptions","gfm","breaks","renderer","Renderer","link","href","title","text","concat","Preview","props","react_default","a","createElement","id","dangerouslySetInnerHTML","__html","markdown","Toolbar","className","onClick","icon","Editor","value","onChange","type","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","placeholder","editorMaximized","previewMaximized","handleChange","bind","assertThisInitialized","handleEditorMaximize","handlePreviewMaximize","e","setState","target","classes","components_Toolbar","components_Editor","components_Preview","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"mOAIAA,IAAOC,WAAW,CACjBC,KAAK,EACLC,QAAQ,EACRC,SAAU,IAAIJ,IAAOK,WAItB,IAAMD,EAAW,IAAIJ,IAAOK,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,EAAOC,GACtC,kCAAAC,OAAmCH,EAAnC,MAAAG,OAA4CD,EAA5C,SAWcE,MARf,SAAiBC,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUC,wBACpB,CAACC,OAAQlB,IAAOY,EAAMO,SAAU,CAAEf,SAAUA,QCPhCgB,MAVf,SAAiBR,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACbR,EAAAC,EAAAC,cAAA,KAAGM,UAAU,qBACZT,EAAMH,KACPI,EAAAC,EAAAC,cAAA,KAAGO,QAASV,EAAMU,QAASD,UAAWT,EAAMW,SCIrCC,EATA,SAACZ,GACd,OACEC,EAAAC,EAAAC,cAAA,YAAUC,GAAG,SACXS,MAAOb,EAAMO,SACbO,SAAUd,EAAMc,SAChBC,KAAK,UCFLC,cACJ,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KACDwB,MAAS,CACZjB,SAAUkB,EACVC,iBAAiB,EACjBC,kBAAkB,GAEpBV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKc,qBAAuBd,EAAKc,qBAAqBF,KAA1BX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAC5BA,EAAKe,sBAAwBf,EAAKe,sBAAsBH,KAA3BX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KATZA,4EAWNgB,GACXb,KAAKc,SAAS,CACZ3B,SAAU0B,EAAEE,OAAOtB,uDAIrBO,KAAKc,SAAS,CACZR,iBAAkBN,KAAKI,MAAME,kEAI/BN,KAAKc,SAAS,CACZP,kBAAmBP,KAAKI,MAAMG,oDAIhC,IAAMS,EAAUhB,KAAKI,MAAME,gBACrB,CAAC,uBACA,mBACA,kBACDN,KAAKI,MAAMG,iBACX,CAAC,kBACA,wBACA,kBACD,CAAC,aACA,cACA,oBACP,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKM,UAAW2B,EAAQ,IACtBnC,EAAAC,EAAAC,cAACkC,EAAD,CACE1B,KAAMyB,EAAQ,GACd1B,QAASU,KAAKW,qBACdlC,KAAK,WACPI,EAAAC,EAAAC,cAACmC,EAAD,CAAQ/B,SAAUa,KAAKI,MAAMjB,SAC3BO,SAAUM,KAAKQ,gBAEnB3B,EAAAC,EAAAC,cAAA,OAAKM,UAAU,cAEfR,EAAAC,EAAAC,cAAA,OAAKM,UAAW2B,EAAQ,IACtBnC,EAAAC,EAAAC,cAACkC,EAAD,CACE1B,KAAMyB,EAAQ,GACd1B,QAASU,KAAKY,sBACdnC,KAAK,cACPI,EAAAC,EAAAC,cAACoC,EAAD,CAAShC,SAAUa,KAAKI,MAAMjB,oBAxDtBiC,IAAMC,WA+DlBhB,EAAW,ytCAiDFT,ICjHf0B,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.6dfeade0.chunk.js","sourcesContent":["import React from 'react';\r\nimport marked from 'marked';\r\n\r\n// ALLOWS LINE BREAKS WITH RETURN BUTTON\r\nmarked.setOptions({\r\n\tgfm: true,\r\n\tbreaks: true,\r\n\trenderer: new marked.Renderer()\r\n});\r\n\r\n// INSERTS target=\"_blank\" INTO HREF TAGS (required for codepen links)\r\nconst renderer = new marked.Renderer();\r\nrenderer.link = function (href, title, text) {\r\n\treturn `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\r\n}\r\n\r\nfunction Preview(props) {\r\n\treturn (\r\n    \t<div id='preview' dangerouslySetInnerHTML={\r\n\t\t\t{__html: marked(props.markdown, { renderer: renderer })}\r\n\t\t} />\r\n    );\r\n}\r\n\r\nexport default Preview;\r\n","import React from 'react';\r\n\r\nfunction Toolbar(props){\r\n    return (\r\n      <div className=\"toolbar\">\r\n        <i className=\"fas fa-pen-fancy\"/>      \r\n        {props.text}\r\n        <i onClick={props.onClick} className={props.icon}></i>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Toolbar;\r\n","import React from 'react';\r\n\r\nconst Editor = (props) => {\r\n  return (\r\n    <textarea id=\"editor\"\r\n      value={props.markdown}\r\n      onChange={props.onChange}\r\n      type=\"text\"/>\r\n    )\r\n}\r\n\r\nexport default Editor;\r\n","import React from 'react';\nimport Preview from './components/Preview';\nimport Toolbar from './components/Toolbar';\nimport Editor from './components/Editor';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state =  {\n      markdown: placeholder,\n      editorMaximized: false,\n      previewMaximized: false\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\n    this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      markdown: e.target.value\n    });\n  }\n  handleEditorMaximize() {\n    this.setState({\n      editorMaximized: !this.state.editorMaximized\n    });\n  }\n  handlePreviewMaximize() {\n    this.setState({\n      previewMaximized: !this.state.previewMaximized\n    });\n  }\n  render() {\n    const classes = this.state.editorMaximized ? \n          ['editorWrap maximized', \n           'previewWrap hide', \n           'fa fa-compress'] : \n          this.state.previewMaximized ?\n          ['editorWrap hide', \n           'previewWrap maximized', \n           'fa fa-compress'] :\n          ['editorWrap', \n           'previewWrap', \n           'fa fa-arrows-alt'];\n    return (\n      <div>\n        <div className={classes[0]}>\n          <Toolbar \n            icon={classes[2]} \n            onClick={this.handleEditorMaximize}\n            text=\"Editor\"/>\n          <Editor markdown={this.state.markdown} \n            onChange={this.handleChange} />\n        </div>\n        <div className=\"converter\">\n        </div>\n        <div className={classes[1]}>\n          <Toolbar\n            icon={classes[2]} \n            onClick={this.handlePreviewMaximize}\n            text=\"Previewer\"/>\n          <Preview markdown={this.state.markdown}/>\n        </div>\n      </div>\n    )\n  }\n};\n\nconst placeholder = \n`\n# Welcome to my Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo](https://pbs.twimg.com/profile_images/446356636710363136/OYIaJ1KK_400x400.png)\n`\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}